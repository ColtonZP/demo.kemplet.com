{"version":3,"sources":["images/add.svg","components/CalendarInput.js","components/Add.js","components/Menu.js","components/Today.js","components/Todo.js","components/TodoList.js","components/TaskDetail.js","components/App.js","stores/TodoStore.js","index.js","functions/kemplet-date.js"],"names":["module","exports","CalendarInput","inject","observer","props","date","Date","useState","getMonth","month","updateMonth","getDate","today","getFullYear","year","updateYear","actualMonth","actualYear","showing","handleDue","toggle","daysInMonth","firstDay","getDay","days","handleUpdateMonth","direction","i","onCurrentMonth","className","style","maxHeight","type","value","onClick","gridColumnEnd","textAlign","map","day","key","gridColumnStart","join","calendarMap","Add","title","updateTitle","due","updateDue","calendar","toggleCalendar","TodoStore","dateToday","tomorrow","name","autoComplete","onChange","e","target","required","onFocus","preventDefault","addTask","todoLists","Menu","displayAdd","toggleAdd","src","add","alt","Today","Intl","DateTimeFormat","weekday","format","dueTasks","length","task","id","Todo","todo","completed","updateCompleted","useEffect","readOnly","checked","TodoList","changeTodo","list","taskId","listId","todos","onSubmit","addTodo","placeholder","TaskDetail","changeList","openTask","removeTask","slice","addList","App","setHours","this","tasks","changeOpenTask","toDateString","Component","complete","observable","quickId","filter","forEach","push","find","decorate","action","computed","store","ReactDOM","render","document","getElementById","toString"],"mappings":"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","file":"static/js/main.465583fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/add.a8357920.svg\";","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { inject, observer } from 'mobx-react';\n\nconst CalendarInput = inject('TodoStore')(\n  observer(props => {\n    const date = new Date();\n    const [month, updateMonth] = useState(date.getMonth());\n    const [today] = useState(date.getDate());\n    const [year, updateYear] = useState(date.getFullYear());\n    const actualMonth = date.getMonth();\n    const actualYear = date.getFullYear();\n    const { showing, handleDue, toggle } = props;\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\n    const firstDay = new Date(year, month, 1).getDay();\n    const months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December',\n    ];\n    let days = [];\n\n    const handleUpdateMonth = direction => {\n      if (direction === 'ascend') {\n        if (month === 11) {\n          updateMonth(0);\n          updateYear(year + 1);\n        } else {\n          updateMonth(month + 1);\n        }\n      }\n      if (direction === 'descend') {\n        if (month === 0) {\n          updateMonth(11);\n          updateYear(year - 1);\n        } else {\n          updateMonth(month - 1);\n        }\n      }\n    };\n\n    for (let i = 1; i <= daysInMonth; i++) {\n      days = [...days, i];\n    }\n\n    function calendarMap(day) {\n      if (day < today && actualMonth === month && actualYear === year) {\n        if (day === 1) {\n          return (\n            <span key={day} style={{ gridColumnStart: firstDay }}>\n              {day}\n            </span>\n          );\n        }\n        return <span key={day}>{day}</span>;\n      }\n      if (day === 1) {\n        return (\n          <input\n            type=\"button\"\n            value={day}\n            key={day}\n            style={{ gridColumnStart: firstDay }}\n            onClick={() => {\n              handleDue([month + 1, day, year].join('/'));\n              toggle();\n            }}\n          />\n        );\n      }\n      return (\n        <input\n          type=\"button\"\n          value={day}\n          key={day}\n          onClick={() => {\n            handleDue([month + 1, day, year].join('/'));\n            toggle();\n          }}\n        />\n      );\n    }\n\n    const onCurrentMonth =\n      actualMonth === month && actualYear === year && 'disabled';\n\n    return (\n      <div\n        className=\"calendarInput\"\n        style={{ maxHeight: showing ? '20em' : 0 }}\n      >\n        <div className=\"calendarControls\">\n          <input\n            type=\"button\"\n            value=\"<\"\n            className={onCurrentMonth}\n            onClick={() => handleUpdateMonth('descend')}\n          />\n          <span\n            className=\"month\"\n            style={{\n              gridColumnEnd: 'span 5',\n              textAlign: 'center',\n            }}\n          >{`${months[month]}, ${year}`}</span>\n          <input\n            type=\"button\"\n            value=\">\"\n            onClick={() => handleUpdateMonth('ascend')}\n          />\n        </div>\n\n        <div className=\"sheet\">\n          <span className=\"day\">Mon</span>\n          <span className=\"day\">Tue</span>\n          <span className=\"day\">Wed</span>\n          <span className=\"day\">Thu</span>\n          <span className=\"day\">Fri</span>\n          <span className=\"day\">Sat</span>\n          <span className=\"day\">Sun</span>\n          {days.map(day => calendarMap(day))}\n        </div>\n      </div>\n    );\n  })\n);\n\nCalendarInput.propTypes = {\n  showing: PropTypes.bool,\n  handleDue: PropTypes.func,\n  toggle: PropTypes.func,\n};\n\nexport default CalendarInput;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { inject, observer } from 'mobx-react';\nimport { dateToday } from '../functions/kemplet-date';\n\nimport CalendarInput from './CalendarInput';\n\nconst Add = inject('TodoStore')(\n  observer(props => {\n    const [title, updateTitle] = useState('');\n    const [due, updateDue] = useState('');\n    const [calendar, toggleCalendar] = useState(false);\n    const { TodoStore, toggle } = props;\n    const today = dateToday(0);\n    const tomorrow = dateToday(1);\n\n    const handleSubmit = e => {\n      e.preventDefault();\n      if (title) {\n        TodoStore.addTask({\n          title: title,\n          todoLists: [],\n          due: due,\n        });\n      }\n      toggle();\n    };\n\n    return (\n      <div className=\"modal\">\n        <form className=\"addContainer\">\n          <div className=\"inputMotion\">\n            <input\n              type=\"text\"\n              name=\"title\"\n              autoComplete=\"off\"\n              value={title}\n              onChange={e => updateTitle(e.target.value)}\n              required\n            />\n            <span>Title:</span>\n          </div>\n\n          <div className=\"inputMotion\">\n            <input\n              type=\"text\"\n              name=\"due\"\n              className=\"dateInput\"\n              autoComplete=\"off\"\n              value={due}\n              required\n              onFocus={() => toggleCalendar(true)}\n            />\n            <span>Due:</span>\n          </div>\n          <CalendarInput\n            showing={calendar}\n            handleDue={updateDue}\n            toggle={toggleCalendar}\n          />\n          <div className=\"dueOptions\">\n            <input\n              className=\"active\"\n              type=\"button\"\n              value=\"none\"\n              onClick={() => {\n                updateDue('');\n                toggleCalendar(false);\n              }}\n            />\n            <input\n              type=\"button\"\n              value=\"today\"\n              onClick={() => {\n                updateDue(today);\n                toggleCalendar(false);\n              }}\n            />\n            <input\n              type=\"button\"\n              value=\"tomorrow\"\n              onClick={() => {\n                updateDue(tomorrow);\n                toggleCalendar(false);\n              }}\n            />\n          </div>\n          <input\n            className=\"addSubmit\"\n            type=\"submit\"\n            value=\"add\"\n            onClick={handleSubmit}\n          />\n        </form>\n        <div className=\"modalBackground\" onClick={toggle} />\n      </div>\n    );\n  })\n);\n\nAdd.propTypes = {\n  addTask: PropTypes.func,\n  toggle: PropTypes.func,\n};\n\nexport default inject('TodoStore')(observer(Add));\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n// import DayNight from \"./DayNight\";\nimport add from '../images/add.svg';\nimport Add from './Add';\n\nfunction Menu(props) {\n  const [displayAdd, toggleAdd] = useState(false);\n  const { addTask } = props;\n\n  const toggle = () => {\n    toggleAdd(!displayAdd);\n  };\n\n  return (\n    <div className=\"menu\">\n      {/* <DayNight /> */}\n      <button className=\"addBtn\" type=\"button\" onClick={() => toggle()}>\n        <img src={add} alt=\"add button\" />\n      </button>\n      {displayAdd && <Add toggle={toggle} addTask={addTask} />}\n    </div>\n  );\n}\n\nMenu.propTypes = {\n  addTask: PropTypes.func,\n};\n\nexport default Menu;\n","import React from 'react';\nimport { inject, observer } from 'mobx-react';\n\nconst Today = inject('TodoStore')(\n  observer(props => {\n    const dateOptions = {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    };\n\n    const date = new Intl.DateTimeFormat('en-US', dateOptions).format(\n      new Date()\n    );\n    const dueTasks = props.TodoStore.dueTasks;\n\n    return (\n      <div className=\"today card\">\n        <h1>{`${date}`}</h1>\n        {dueTasks.length >= 1 && (\n          <div className=\"dueToday\">\n            <span className=\"dueTitle\">Due today</span>\n            <ul>\n              {dueTasks.map(task => (\n                <li key={task.id}>{task.title}</li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </div>\n    );\n  })\n);\n\nexport default Today;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Todo(props) {\n  const { todo } = props;\n  const [completed, updateCompleted] = useState(todo.completed);\n\n  useEffect(() => {\n    todo.completed = completed;\n  });\n\n  return (\n    <li className=\"todoCheck\">\n      <input\n        type=\"checkbox\"\n        readOnly\n        checked={completed}\n        onClick={() => updateCompleted(!completed)}\n      />\n      <label>{todo.todo}</label>\n    </li>\n  );\n}\n\nTodo.propTypes = {\n  todo: PropTypes.object,\n};\n\nexport default Todo;\n","import React, { useState } from 'react';\nimport { inject, observer } from 'mobx-react';\n\nimport Todo from './Todo';\n\nconst TodoList = inject('TodoStore')(\n  observer(props => {\n    const [todo, changeTodo] = useState('');\n    const { TodoStore, list, taskId, listId } = props;\n\n    const handleSubmit = e => {\n      e.preventDefault();\n      if (todo.length > 0) {\n        TodoStore.addTodo(taskId, listId, todo);\n        changeTodo('');\n      }\n    };\n\n    return (\n      <div className=\"todoList\">\n        <h2>{list.title}</h2>\n        <ul>\n          {list.todos.map(todo => (\n            <Todo todo={todo} key={todo.todo} />\n          ))}\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"text\"\n              name=\"addTodo\"\n              className=\"addTodo\"\n              autoComplete=\"off\"\n              placeholder=\"Add item\"\n              value={todo}\n              onChange={e => changeTodo(e.target.value)}\n            />\n            <input className=\"submitTodo\" type=\"submit\" value=\"+\" />\n          </form>\n        </ul>\n      </div>\n    );\n  })\n);\n\nexport default TodoList;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { inject, observer } from 'mobx-react';\n\nimport TodoList from './TodoList';\n// import Progress from \"./Progress\";\n// import Options from \"./Options\";\n\nconst TaskDetail = inject('TodoStore')(\n  observer(props => {\n    const [list, changeList] = useState('');\n    const { TodoStore } = props;\n    const task = TodoStore.openTask;\n    const removeTask = () => TodoStore.removeTask(task.id);\n\n    const handleSubmit = e => {\n      e.preventDefault();\n      if (list.length > 0) {\n        TodoStore.addList(task.id, list);\n        changeList('');\n      }\n    };\n\n    return (\n      <div className=\"taskDetailContainer card\">\n        {/* <Progress list={task.todoLists} /> */}\n        <div className=\"taskDetails\">\n          {/* <Options id={task.id} removeTask={removeTask} /> */}\n          <h1>{task.title}</h1>\n          <input\n            type=\"button\"\n            value=\"remove\"\n            className=\"remove\"\n            onClick={removeTask}\n          />\n          <span>{`Due: ${task.due.slice(0, -5)}`}</span>\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"text\"\n              className=\"listText\"\n              value={list}\n              onChange={e => changeList(e.target.value)}\n            />\n            <input type=\"submit\" value=\"add list\" />\n          </form>\n          <div className=\"todoLists\">\n            {task.todoLists.map(list => (\n              <TodoList\n                list={list}\n                key={list.id}\n                listId={list.id}\n                taskId={task.id}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  })\n);\n\nTaskDetail.propTypes = {\n  TodoStore: PropTypes.func,\n};\n\nexport default TaskDetail;\n","import React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport PropTypes from 'prop-types';\n\nimport Menu from './Menu';\nimport Today from './Today';\nimport TaskDetail from './TaskDetail';\n\nclass App extends Component {\n  render() {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const { TodoStore } = this.props;\n    const tasks = TodoStore.tasks;\n    return (\n      <div className=\"App\">\n        <Menu />\n        <div className=\"content\">\n          <div className=\"tasks\">\n            <div className=\"taskContent\">\n              <div className=\"taskList\">\n                <Today />\n                {tasks.map(task => (\n                  <div\n                    key={task.id}\n                    className=\"card boardBtn\"\n                    type=\"button\"\n                    onClick={() => {\n                      TodoStore.changeOpenTask(task.id);\n                    }}\n                  >\n                    <div>{task.title}</div>\n                    {new Date(task.due).toDateString() ===\n                    today.toDateString() ? (\n                      <span className=\"dueToday\">today</span>\n                    ) : (\n                      <span>{task.due.slice(0, -5)}</span>\n                    )}\n                  </div>\n                ))}\n              </div>\n              {TodoStore.openTask.id && <TaskDetail />}\n            </div>\n          </div>\n          {/* <Calendar /> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  TodoStore: PropTypes.func,\n};\n\nexport default inject('TodoStore')(observer(App));\n","import { observable, action, computed, decorate } from 'mobx';\nimport { quickId } from 'quickids';\nimport { dateToday } from '../functions/kemplet-date';\n\nclass TodoStore {\n  tasks = [\n    {\n      title: 'Welcome MobX',\n      due: dateToday(0),\n      id: 'welcome',\n      complete: false,\n      todoLists: [\n        {\n          title: 'Add a board',\n          id: 'welcome-list-1',\n          completed: false,\n          todos: [\n            {\n              todo:\n                'to add a task board, click the add button at the top of the window.',\n              completed: false,\n            },\n          ],\n        },\n        {\n          title: 'Add a todo list',\n          id: 'welcome-list-2',\n          completed: false,\n          todos: [\n            {\n              todo:\n                'add a list to the board by pressing the add button at the top of the board.',\n              completed: false,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      title: 'Welcome MobX 2',\n      due: dateToday(0),\n      id: 'welcome2',\n      complete: false,\n      todoLists: [\n        {\n          title: 'Add a board',\n          id: 'welcome-list-1',\n          completed: false,\n          todos: [],\n        },\n        {\n          title: 'Add a todo list',\n          id: 'welcome-list-2',\n          completed: false,\n          todos: [\n            {\n              todo:\n                'add a list to the board by pressing the add button at the top of the board.',\n              completed: false,\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  openTask = observable({});\n\n  addTask = task => {\n    task.id = quickId();\n    this.tasks = [...this.tasks, task];\n    this.changeOpenTask(task.id);\n  };\n\n  removeTask = id => {\n    this.tasks = this.tasks.filter(task => task.id !== id);\n    this.openTask = {};\n  };\n\n  addList = (taskId, list) => {\n    this.tasks.forEach(task => {\n      task.id === taskId &&\n        task.todoLists.push({\n          title: list,\n          id: quickId(),\n          completed: false,\n          todos: [],\n        });\n    });\n  };\n\n  addTodo = (taskId, listId, todo) => {\n    this.tasks.forEach(task => {\n      task.id === taskId &&\n        task.todoLists.forEach(list => {\n          list.id === listId &&\n            list.todos.push({ todo: todo, completed: false });\n        });\n    });\n  };\n\n  changeOpenTask = id => {\n    this.openTask = this.tasks.find(task => {\n      return task.id === id;\n    });\n  };\n\n  get dueTasks() {\n    const dueToday = this.tasks.filter(task => {\n      return task.due === dateToday(0);\n    });\n    return dueToday;\n  }\n}\n\ndecorate(TodoStore, {\n  tasks: observable,\n  openTask: observable,\n  addTask: action,\n  removeTask: action,\n  addList: action,\n  addTodo: action,\n  changeOpenTask: action,\n  dueTasks: computed,\n});\n\nconst store = new TodoStore();\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.scss\";\nimport App from \"./components/App\";\nimport { Provider } from \"mobx-react\";\n\nimport TodoStore from \"./stores/TodoStore\";\n\nReactDOM.render(\n  <Provider TodoStore={TodoStore}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","exports.dateToday = (add) => {\n  const date = new Date();\n  let month = (date.getMonth() + 1).toString();\n  let day = date.getDate() + add;\n  const year = date.getFullYear();\n  const returnDate = [month, day, year].join(\"/\");\n  return returnDate;\n};\n"],"sourceRoot":""}
{"version":3,"sources":["components/CalendarInput.js","components/Add.js","components/Menu.js","components/Today.js","components/Todo.js","components/TodoList.js","components/TaskDetail.js","components/App.js","stores/TodoStore.js","index.js","functions/kemplet-date.js"],"names":["CalendarInput","inject","observer","props","date","Date","useState","getMonth","month","updateMonth","getDate","today","getFullYear","year","updateYear","actualMonth","actualYear","showing","handleDue","toggle","daysInMonth","firstDay","getDay","days","handleUpdateMonth","direction","i","onCurrentMonth","className","style","maxHeight","type","value","onClick","gridColumnEnd","textAlign","map","day","key","gridColumnStart","join","calendarMap","Add","title","updateTitle","due","updateDue","hour","minute","calendar","toggleCalendar","TodoStore","dateToday","tomorrow","name","autoComplete","onChange","e","target","required","onFocus","preventDefault","submitDue","setHours","getTime","addTask","Menu","displayAdd","toggleAdd","icon","faPlus","Today","Intl","DateTimeFormat","weekday","format","dueTasks","lateTasks","length","task","id","Todo","todo","completed","updateCompleted","useEffect","readOnly","checked","TodoList","changeTodo","collapsed","toggleCollapse","list","taskId","listId","faCaretDown","todos","Math","random","onSubmit","addTodo","placeholder","TaskDetail","changeList","openTask","removeTask","getHours","getMinutes","addList","todoLists","App","this","sortedTasks","changeOpenTask","toDateString","Component","tasks","complete","observable","quickId","filter","forEach","push","find","hasDue","noDue","sorted","sort","a","b","decorate","action","computed","store","ReactDOM","render","document","getElementById","exports","add","toString"],"mappings":"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","file":"static/js/main.b7f8f745.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { inject, observer } from 'mobx-react';\n\nconst CalendarInput = inject('TodoStore')(\n  observer(props => {\n    const date = new Date();\n    const [month, updateMonth] = useState(date.getMonth());\n    const [today] = useState(date.getDate());\n    const [year, updateYear] = useState(date.getFullYear());\n    const actualMonth = date.getMonth();\n    const actualYear = date.getFullYear();\n    const { showing, handleDue, toggle } = props;\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\n    const firstDay = new Date(year, month, 1).getDay();\n    const months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December',\n    ];\n    let days = [];\n\n    const handleUpdateMonth = direction => {\n      if (direction === 'ascend') {\n        if (month === 11) {\n          updateMonth(0);\n          updateYear(year + 1);\n        } else {\n          updateMonth(month + 1);\n        }\n      }\n      if (direction === 'descend') {\n        if (month === 0) {\n          updateMonth(11);\n          updateYear(year - 1);\n        } else {\n          updateMonth(month - 1);\n        }\n      }\n    };\n\n    for (let i = 1; i <= daysInMonth; i++) {\n      days = [...days, i];\n    }\n\n    function calendarMap(day) {\n      if (day < today && actualMonth === month && actualYear === year) {\n        if (day === 1) {\n          return (\n            <span key={day} style={{ gridColumnStart: firstDay }}>\n              {day}\n            </span>\n          );\n        }\n        return <span key={day}>{day}</span>;\n      }\n      if (day === 1) {\n        return (\n          <input\n            type=\"button\"\n            value={day}\n            key={day}\n            style={{ gridColumnStart: firstDay }}\n            onClick={() => {\n              handleDue([month + 1, day, year].join('/'));\n              toggle();\n            }}\n          />\n        );\n      }\n      return (\n        <input\n          type=\"button\"\n          value={day}\n          key={day}\n          onClick={() => {\n            handleDue([month + 1, day, year].join('/'));\n            toggle();\n          }}\n        />\n      );\n    }\n\n    const onCurrentMonth =\n      actualMonth === month && actualYear === year && 'disabled';\n\n    return (\n      <div\n        className=\"calendarInput\"\n        style={{ maxHeight: showing ? '20em' : 0 }}\n      >\n        <div className=\"calendarControls\">\n          <input\n            type=\"button\"\n            value=\"<\"\n            className={onCurrentMonth}\n            onClick={() => handleUpdateMonth('descend')}\n          />\n          <span\n            className=\"month\"\n            style={{\n              gridColumnEnd: 'span 5',\n              textAlign: 'center',\n            }}\n          >{`${months[month]}, ${year}`}</span>\n          <input\n            type=\"button\"\n            value=\">\"\n            onClick={() => handleUpdateMonth('ascend')}\n          />\n        </div>\n\n        <div className=\"sheet\">\n          <span className=\"day\">Mon</span>\n          <span className=\"day\">Tue</span>\n          <span className=\"day\">Wed</span>\n          <span className=\"day\">Thu</span>\n          <span className=\"day\">Fri</span>\n          <span className=\"day\">Sat</span>\n          <span className=\"day\">Sun</span>\n          {days.map(day => calendarMap(day))}\n        </div>\n      </div>\n    );\n  })\n);\n\nCalendarInput.propTypes = {\n  showing: PropTypes.bool,\n  handleDue: PropTypes.func,\n  toggle: PropTypes.func,\n};\n\nexport default CalendarInput;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { inject, observer } from 'mobx-react';\nimport { dateToday } from '../functions/kemplet-date';\n\nimport CalendarInput from './CalendarInput';\n\nconst Add = inject('TodoStore')(\n  observer(props => {\n    const [title, updateTitle] = useState('');\n    const [due, updateDue] = useState('');\n    const [hour, updateHour] = useState('23');\n    const [minute, updateMinute] = useState('59');\n    const [calendar, toggleCalendar] = useState(false);\n    const { TodoStore, toggle } = props;\n    const today = dateToday(0);\n    const tomorrow = dateToday(1);\n\n    const handleSubmit = e => {\n      e.preventDefault();\n      let submitDue = new Date(due);\n      submitDue.setHours(hour, minute, 0);\n      submitDue.getTime();\n      if (due === '') {\n        submitDue = '';\n      }\n      if (title) {\n        TodoStore.addTask({\n          title: title,\n          due: submitDue,\n        });\n        toggle();\n      }\n    };\n\n    return (\n      <div className=\"modal\">\n        <form className=\"addContainer\">\n          <div className=\"inputMotion\">\n            <input\n              type=\"text\"\n              name=\"title\"\n              autoComplete=\"off\"\n              value={title}\n              onChange={e => updateTitle(e.target.value)}\n              required\n            />\n            <span>Title:</span>\n          </div>\n\n          <div className=\"inputMotion\">\n            <input\n              type=\"text\"\n              name=\"due\"\n              className=\"dateInput\"\n              autoComplete=\"off\"\n              value={due}\n              required\n              onFocus={() => toggleCalendar(true)}\n            />\n            <span>Due:</span>\n          </div>\n          <CalendarInput\n            showing={calendar}\n            handleDue={updateDue}\n            toggle={toggleCalendar}\n          />\n          <div className=\"dueOptions\">\n            <input\n              className=\"active\"\n              type=\"button\"\n              value=\"none\"\n              onClick={() => {\n                updateDue('');\n                toggleCalendar(false);\n              }}\n            />\n            <input\n              type=\"button\"\n              value=\"today\"\n              onClick={() => {\n                updateDue(today);\n                toggleCalendar(false);\n              }}\n            />\n            <input\n              type=\"button\"\n              value=\"tomorrow\"\n              onClick={() => {\n                updateDue(tomorrow);\n                toggleCalendar(false);\n              }}\n            />\n          </div>\n          <input\n            className=\"addSubmit\"\n            type=\"submit\"\n            value=\"add\"\n            onClick={handleSubmit}\n          />\n        </form>\n        <div className=\"modalBackground\" onClick={toggle} />\n      </div>\n    );\n  })\n);\n\nAdd.propTypes = {\n  addTask: PropTypes.func,\n  toggle: PropTypes.func,\n};\n\nexport default inject('TodoStore')(observer(Add));\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\n\n// import DayNight from \"./DayNight\";\nimport Add from './Add';\n\nfunction Menu(props) {\n  const [displayAdd, toggleAdd] = useState(false);\n  const { addTask } = props;\n\n  const toggle = () => {\n    toggleAdd(!displayAdd);\n  };\n\n  return (\n    <div className=\"menu\">\n      {/* <DayNight /> */}\n      <button className=\"addBtn\" type=\"button\" onClick={() => toggle()}>\n        <FontAwesomeIcon icon={faPlus} />\n      </button>\n      {displayAdd && <Add toggle={toggle} addTask={addTask} />}\n    </div>\n  );\n}\n\nMenu.propTypes = {\n  addTask: PropTypes.func,\n};\n\nexport default Menu;\n","import React from 'react';\nimport { inject, observer } from 'mobx-react';\n\nconst Today = inject('TodoStore')(\n  observer(props => {\n    const dateOptions = {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    };\n\n    const date = new Intl.DateTimeFormat('en-US', dateOptions).format(\n      new Date()\n    );\n\n    const dueTasks = props.TodoStore.dueTasks;\n    const lateTasks = props.TodoStore.lateTasks;\n\n    return (\n      <div className=\"today card\">\n        <h1>{`${date}`}</h1>\n        {lateTasks.length >= 1 && (\n          <div className=\"dueLate\">\n            <span className=\"dueTitle\">Late</span>\n            <ul>\n              {lateTasks.map(task => (\n                <li key={task.id}>{task.title}</li>\n              ))}\n            </ul>\n          </div>\n        )}\n        {dueTasks.length >= 1 && (\n          <div className=\"dueToday\">\n            <span className=\"dueTitle\">Due today</span>\n            <ul>\n              {dueTasks.map(task => (\n                <li key={task.id}>{task.title}</li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </div>\n    );\n  })\n);\n\nexport default Today;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Todo(props) {\n  const { todo } = props;\n  const [completed, updateCompleted] = useState(todo.completed);\n\n  useEffect(() => {\n    todo.completed = completed;\n  });\n\n  return (\n    <li className=\"todoCheck\">\n      <input\n        type=\"checkbox\"\n        readOnly\n        checked={completed}\n        onClick={() => updateCompleted(!completed)}\n      />\n      <label>{todo.todo}</label>\n    </li>\n  );\n}\n\nTodo.propTypes = {\n  todo: PropTypes.object,\n};\n\nexport default Todo;\n","import React, { useState } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons';\n\nimport Todo from './Todo';\n\nconst TodoList = inject('TodoStore')(\n  observer(props => {\n    const [todo, changeTodo] = useState('');\n    const [collapsed, toggleCollapse] = useState(false);\n    const { TodoStore, list, taskId, listId } = props;\n\n    const handleSubmit = e => {\n      e.preventDefault();\n      if (todo.length > 0) {\n        TodoStore.addTodo(taskId, listId, todo);\n        changeTodo('');\n      }\n    };\n\n    return (\n      <div className=\"todoList\">\n        <h2>{list.title}</h2>\n        <button\n          className={collapsed ? 'collapseButton flipped' : 'collapseButton'}\n          type=\"button\"\n          value=\"Show\"\n          onClick={() => toggleCollapse(!collapsed)}\n        >\n          <FontAwesomeIcon icon={faCaretDown} />\n        </button>\n        <ul className={collapsed && 'collapsed'}>\n          {list.todos.map(todo => (\n            <Todo todo={todo} key={todo.todo + Math.random()} />\n          ))}\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"text\"\n              name=\"addTodo\"\n              className=\"addTodo\"\n              autoComplete=\"off\"\n              placeholder=\"Add item\"\n              value={todo}\n              onChange={e => changeTodo(e.target.value)}\n            />\n            <input className=\"submitTodo\" type=\"submit\" value=\"+\" />\n          </form>\n        </ul>\n      </div>\n    );\n  })\n);\n\nexport default TodoList;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { inject, observer } from 'mobx-react';\n\nimport TodoList from './TodoList';\n// import Progress from \"./Progress\";\n// import Options from \"./Options\";\n\nconst TaskDetail = inject('TodoStore')(\n  observer(props => {\n    const [list, changeList] = useState('');\n    const { TodoStore } = props;\n    const task = TodoStore.openTask;\n    const removeTask = () => TodoStore.removeTask(task.id);\n    const due = new Date(task.due);\n\n    const handleSubmit = e => {\n      e.preventDefault();\n      if (list.length > 0) {\n        TodoStore.addList(task.id, list);\n        changeList('');\n      }\n    };\n\n    function formatTime(hour, minute) {\n      return `${hour > 12 ? hour - 12 : hour}:${minute} ${\n        hour > 12 ? 'pm' : 'am'\n      }`;\n    }\n\n    return (\n      <div className=\"taskDetailContainer card\">\n        {/* <Progress list={task.todoLists} /> */}\n        <div className=\"taskDetails\">\n          {/* <Options id={task.id} removeTask={removeTask} /> */}\n          <h1>{task.title}</h1>\n          <input\n            type=\"button\"\n            value=\"remove\"\n            className=\"remove\"\n            onClick={removeTask}\n          />\n          {task.due && (\n            <span>\n              {`Due: ${due.getMonth()}/${due.getDate()} at ${formatTime(\n                due.getHours(),\n                due.getMinutes()\n              )}`}\n            </span>\n          )}\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"text\"\n              className=\"listText\"\n              value={list}\n              onChange={e => changeList(e.target.value)}\n            />\n            <input type=\"submit\" value=\"add list\" />\n          </form>\n          <div className=\"todoLists\">\n            {task.todoLists.map(list => (\n              <TodoList\n                list={list}\n                key={list.id}\n                listId={list.id}\n                taskId={task.id}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  })\n);\n\nTaskDetail.propTypes = {\n  TodoStore: PropTypes.func,\n};\n\nexport default TaskDetail;\n","import React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport PropTypes from 'prop-types';\n\nimport Menu from './Menu';\nimport Today from './Today';\nimport TaskDetail from './TaskDetail';\n\nclass App extends Component {\n  render() {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const { TodoStore } = this.props;\n    return (\n      <div className=\"App\">\n        <Menu />\n        <div className=\"content\">\n          <div className=\"tasks\">\n            <div className=\"taskContent\">\n              <div className=\"taskList\">\n                <Today />\n                {TodoStore.sortedTasks.map(task => (\n                  <div\n                    key={task.id}\n                    className=\"card boardBtn\"\n                    type=\"button\"\n                    onClick={() => {\n                      TodoStore.changeOpenTask(task.id);\n                    }}\n                  >\n                    <div>{task.title}</div>\n                    {task.due !== '' && task.due < new Date().getTime() ? (\n                      <span className=\"dueLate\">Late</span>\n                    ) : new Date(task.due).toDateString() ===\n                      new Date().toDateString() ? (\n                      <span className=\"dueToday\">Today</span>\n                    ) : (\n                      task.due && (\n                        <span>{`${new Date(task.due).getMonth()}/${new Date(\n                          task.due\n                        ).getDate()}`}</span>\n                      )\n                    )}\n                  </div>\n                ))}\n                {/* {TodoStore.noDue.map(task => (\n                  <div\n                    key={task.id}\n                    className=\"card boardBtn\"\n                    type=\"button\"\n                    onClick={() => {\n                      TodoStore.changeOpenTask(task.id);\n                    }}\n                  >\n                    <div>{task.title}</div>\n                  </div>\n                ))} */}\n              </div>\n              {TodoStore.openTask.id && <TaskDetail />}\n            </div>\n          </div>\n          {/* <Calendar /> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  TodoStore: PropTypes.object,\n};\n\nexport default inject('TodoStore')(observer(App));\n","import { observable, action, computed, decorate } from 'mobx';\nimport { quickId } from 'quickids';\nimport { dateToday } from '../functions/kemplet-date';\n\nclass TodoStore {\n  tasks = [\n    {\n      title: 'Welcome',\n      due: new Date(new Date().setHours(23, 59, 0)).getTime(),\n      id: 'welcome',\n      complete: false,\n      todoLists: [\n        {\n          title: 'Add a board',\n          id: 'welcome-list-1',\n          completed: false,\n          todos: [\n            {\n              todo:\n                'to add a task board, click the add button at the top of the window.',\n              completed: false,\n            },\n          ],\n        },\n        {\n          title: 'Add a todo list',\n          id: 'welcome-list-2',\n          completed: false,\n          todos: [\n            {\n              todo:\n                'add a list to the board by pressing the add button at the top of the board.',\n              completed: false,\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  openTask = observable({});\n\n  addTask = task => {\n    task.id = quickId();\n    task.todoLists = [];\n    task.completed = false;\n    this.tasks = [...this.tasks, task];\n    this.changeOpenTask(task.id);\n  };\n\n  removeTask = id => {\n    this.tasks = this.tasks.filter(task => task.id !== id);\n    this.openTask = {};\n  };\n\n  addList = (taskId, list) => {\n    this.tasks.forEach(task => {\n      task.id === taskId &&\n        task.todoLists.push({\n          title: list,\n          id: quickId(),\n          completed: false,\n          todos: [],\n        });\n    });\n  };\n\n  addTodo = (taskId, listId, todo) => {\n    this.tasks.forEach(task => {\n      task.id === taskId &&\n        task.todoLists.forEach(list => {\n          list.id === listId &&\n            list.todos.push({ todo: todo, completed: false });\n        });\n    });\n  };\n\n  changeOpenTask = id => {\n    this.openTask = this.tasks.find(task => {\n      return task.id === id;\n    });\n  };\n\n  get dueTasks() {\n    const dueToday = this.tasks.filter(task => {\n      return (\n        new Date(task.due).toDateString() === new Date().toDateString() &&\n        !task.completed\n      );\n    });\n    return dueToday;\n  }\n\n  get lateTasks() {\n    const late = this.tasks.filter(task => {\n      return (\n        new Date(task.due).getTime() < new Date(dateToday(0)).getTime() &&\n        !task.completed\n      );\n    });\n    return late;\n  }\n\n  get sortedTasks() {\n    function compare(a, b) {\n      if (a.due < b.due) {\n        return -1;\n      } else if (a.due > b.due) {\n        return 1;\n      } else return 0;\n    }\n    const tasks = this.tasks;\n    const hasDue = tasks.filter(task => {\n      return task.due !== '';\n    });\n    const noDue = tasks.filter(task => {\n      return task.due === '';\n    });\n    const sorted = hasDue.sort(compare);\n    return [...sorted, ...noDue];\n  }\n}\n\ndecorate(TodoStore, {\n  tasks: observable,\n  openTask: observable,\n  addTask: action,\n  removeTask: action,\n  addList: action,\n  addTodo: action,\n  changeOpenTask: action,\n  dueTasks: computed,\n  lateTasks: computed,\n  sortedTasks: computed,\n});\n\nconst store = new TodoStore();\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.scss\";\nimport App from \"./components/App\";\nimport { Provider } from \"mobx-react\";\n\nimport TodoStore from \"./stores/TodoStore\";\n\nReactDOM.render(\n  <Provider TodoStore={TodoStore}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","exports.dateToday = (add) => {\n  const date = new Date();\n  let month = (date.getMonth() + 1).toString();\n  let day = date.getDate() + add;\n  const year = date.getFullYear();\n  const returnDate = [month, day, year].join(\"/\");\n  return returnDate;\n};\n"],"sourceRoot":""}